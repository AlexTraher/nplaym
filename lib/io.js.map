{"version":3,"sources":["../src/io.js"],"names":[],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAM,OAAO,QAAQ,IAAR,CAAa,KAAb,CAAmB,CAAnB,CAAP;;AAEN,iBAAU,GAAV,CAAc,IAAd;;AAEA,IAAI,YAAY,EAAZ;;AAEJ,IAAM,MAAM,oBAAI,KAAJ,CAAU,KAAV,EAAiB,IAAjB,EAAuB;AACjC,OAAK,QAAQ,GAAR,EAAL;CADU,CAAN;;AAIN,IAAM,qBAAqB,EAArB;;AAEN,SAAS,cAAT,GAA2B;AACzB,MAAI,MAAJ,CAAW,EAAX,CAAc,MAAd,EAAsB,aAAK;AACzB,YA0CyC,YA1CzC,YAAY,EAAE,QAAF,EAAZ;;AADyB,QAGnB,SAAS,iBAAU,KAAV,CAAgB,CAAhB,CAAT,CAHmB;AAIzB,QAAI,CAAC,MAAD,EAAS;AACX,aADW;KAAb;AAGA,QAAM,OAAO,OAAO,KAAP,CAAa,GAAb,CAAP,CAPmB;AAQzB,SAAK,OAAL,CAAa,eAAO;AAClB,yBAAmB,GAAnB,IAA0B,CAA1B,CADkB;KAAP,CAAb,CARyB;GAAL,CAAtB,CADyB;;AAczB,MAAI,MAAJ,CAAW,EAAX,CAAc,KAAd,EAAqB,aAAK;AACxB,aAAS,IAAT,EADwB;GAAL,CAArB,CAdyB;;AAkBzB,MAAI,EAAJ,CAAO,OAAP,EAAgB,aAAK;AACnB,aAAS,IAAT,EADmB;GAAL,CAAhB,CAlByB;;AAsBzB,0BAAS,QAAQ,KAAR,CAAT,CAtByB;AAuBzB,UAAQ,KAAR,CAAc,EAAd,CAAiB,UAAjB,EAA6B,UAAU,KAAV,EAAiB,GAAjB,EAAsB;AACjD,QAAI,CAAC,GAAD,EAAM,OAAV;AACA,QAAI,IAAI,IAAJ,IAAY,IAAI,IAAJ,IAAY,GAAZ,EAAiB,QAAQ,IAAR,CAAa,CAAb,EAAjC;AACA,YAAQ,IAAI,IAAJ;AACN,WAAK,MAAL;AACE,qBAAO,IAAP,GAAc,KAAK,GAAL,CAAS,aAAO,IAAP,GAAc,CAAd,qBAAT,CAAd,CADF;AAEA,cAFA;AADF,WAIO,OAAL;AACE,qBAAO,IAAP,GAAc,KAAK,GAAL,CAAS,aAAO,IAAP,GAAc,CAAd,EAAiB,uCAA1B,CAAd,CADF;AAEA,cAFA;AAJF,WAOO,OAAL;AACE,0BADF;AAEA,cAFA;AAPF,KAHiD;GAAtB,CAA7B,CAvByB;;AAuCzB,UAAQ,KAAR,CAAc,UAAd,CAAyB,IAAzB,EAvCyB;AAwCzB,UAAQ,KAAR,CAAc,MAAd,GAxCyB;CAA3B;;QA4CS;QAAgB;QAAoB","file":"io.js","sourcesContent":["import { HEIGHT, WIDTH, LEFTWALL, RIGHTWALL, MIDWIDTH, MIDHEIGHT, FPS, FRAMERATE, DIFFICULTY, STARTTIME, PLAYERLINE } from './constants.js';\nimport keypress from 'keypress';\nimport pty from 'child_pty';\nimport { fire, player } from './game.js'\nimport argsparse from './parser.js'\nimport term from 'node-terminal';\n\nconst args = process.argv.slice(2);\n\nargsparse.set(args);\n\nlet npmOutput = '';\n\nconst npm = pty.spawn('npm', args, {\n  cwd: process.cwd()\n})\n\nconst installingPackages = {};\n\nfunction startListening () {\n  npm.stdout.on('data', d => {\n    npmOutput = d.toString();\n    // We store it as keys in an object to uniq them\n    const output = argsparse.parse(d);\n    if (!output) {\n      return;\n    }\n    const pkgs = output.split(' ');\n    pkgs.forEach(pkg => {\n      installingPackages[pkg] = 1;\n    })\n  });\n\n  npm.stdout.on('end', d => {\n    gameOver(true);\n  });\n\n  npm.on('close', d => {\n    gameOver(true);\n  });\n\n  keypress(process.stdin);\n  process.stdin.on('keypress', function (chunk, key) {\n    if (!key) return; \n    if (key.ctrl && key.name == 'c') process.exit(1);\n    switch (key.name) {\n      case 'left':\n        player.left = Math.max(player.left - 1, LEFTWALL);\n      break;\n      case 'right':\n        player.left = Math.min(player.left + 1, WIDTH - RIGHTWALL);\n      break;\n      case 'space':\n        fire();\n      break;\n    }\n  });\n\n  process.stdin.setRawMode(true);\n  process.stdin.resume();\n}\n\n\nexport { startListening, installingPackages, npmOutput }"]}